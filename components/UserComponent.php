<?php


namespace app\components;


use app\base\BaseComponent;
use app\models\User;
use yii\web\Cookie;
use yii\web\UploadedFile;

class UserComponent extends BaseComponent {
    public $modelClass;

    public function init() {
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function getModel() {
        return new $this->modelClass;
    }

    public function updateUser(User $user):bool {
        $user->avaReal = UploadedFile::getInstance($user, 'avaReal');
        $fileSaver = \Yii::createObject(['class' => FileSaverComponent::class]);

        if ($user->validate()) {
            if ($user->avaReal) {
                $file = $fileSaver->saveAvatar($user->avaReal);
                if (!$file) {
                    return false;
                }
                $user->avatar = $file;
            }

            // валидация + сохранение активности
            if ($user->save(false)) {
                return true;
            }

            \Yii::error($user->getErrors());
            return false;
        }

        //валидация файлов не прошла
        return false;
    }

    public function checkConfirmationEmail():bool {
        $user = \Yii::$app->user->getIdentity();
        if ($user->confirm_email != 1) {
            // получаем куки от клиента
            $reqCookie = \Yii::$app->request->cookies;
            // куки для отдачи клиенту
            $resCookie = \Yii::$app->response->cookies;
            $confirmEmailCookie = $reqCookie->getValue('conf_email_cookie', '0');
            if ($confirmEmailCookie == '0') {
                $resCookie->add(new Cookie([
                    'name' => 'conf_email_cookie',
                    'value' => 1,
                    'expire' => time() + 86400,
                ]));
                return true;
            }
            return false;
        }
        return false;
    }


    public function sendConfirmCuratorEmailMail(User $user) :bool {
        $auth = \Yii::$app->auth;
        if ($user->mentor_email_confirm == 0) {
            $confirmation_token = $auth->generateConfirmationEmailToken();
            $user->mentor_access_token = $confirmation_token;
            $user->grade_token = $auth->generateUserGradeToken();
            if ($user->save()) {
                $message = \Yii::$app->mailer->compose(
                    'mentors_confirm', [
                        'confirmation_token' => $confirmation_token,
                        'userId' => $user->id,
                        'name' => $user->name,
                    ]
                )
                    ->setFrom(\Yii::$app->params['setFromDomain'])
                    ->setTo($user->mentor_email)
                    ->setSubject('iselfmade - Подтверждение наставника')
                    ->send();
                return true;
            } else {
                return false;
            }
        }
        return false;
    }

    public function confirmCuratorsEmail(User $user, $confirmation_token) :bool {
        if ($user->mentor_access_token === $confirmation_token) {
            $user->mentor_access_token = null;
            $user->mentor_email_confirm = 1;
            $user->mentor_access_token = null;
            $user->scenario = 'confirmationCuratorsEmail';
            if ($user->save()) {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    public function getTotalCountUsers() {
        return User::find()->count();
    }

    public function getLastDayCountUsers() {
        return User::find()
            ->andWhere(['AND',
                ['>=', 'date_create', (new \DateTime(date('d.m.Y') . ' 00:00:00'))->format('Y-m-d H:i:s')],
                ['<=', 'date_create', (new \DateTime(date('d.m.Y') . ' 23:59:59'))->format('Y-m-d H:i:s')],

            ])
            ->count();
    }

    public function getUsersList() {
        return User::find()
            ->select('*')
//            ->andWhere(['AND',
//                ['>=', 'date_create', (new \DateTime(date('d.m.Y') . ' 00:00:00'))->format('Y-m-d H:i:s')],
//                ['<=', 'date_create', (new \DateTime(date('d.m.Y') . ' 23:59:59'))->format('Y-m-d H:i:s')],
//
//            ])
            ->all();
    }
}