<?php


namespace app\components;


use app\base\BaseComponent;
use app\models\ReportComments;
use app\models\UsersReports;

class ReportCommentsComponent extends BaseComponent {
    public $modelClass;

    public function init() {
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function getModel() {
        return new $this->modelClass;
    }

    /**
     * @param $reportId
     * @return UsersReports|array|\yii\db\ActiveRecord|null
     */
    public function getReportCommentsByReportID($reportId) {
//        $todayUTC = date('Y-m-d');
        $comments = ReportComments::find()
            ->where([
                'report_id' => $reportId,
            ])
            ->joinWith('user')
//            ->joinWith('comments_to_users')
//            ->where(['users.id' => 2])
//            ->andWhere(['OR',
//                ['IS', 'status', null],
//                ['<', 'status', 4],
//            ])
            ->orderBy(['date_create' => SORT_ASC])
            ->limit(10)
            ->all();
        return $comments;
    }

    public function getNewComments() {
        $user_id = \Yii::$app->user->getId();

        $comments = ReportComments::find()
            ->where([
                'viewed' => null,
            ])
            ->andWhere(['not', ['`report_comments`.user_id' => $user_id]])
            ->joinWith('report')
            ->where(['`users_reports`.user_id' => $user_id])
            ->orderBy(['date_create' => SORT_ASC])
            ->all();
        return $comments;
    }

    public function addReportComment(ReportComments $comment) {
        if (!$comment->files) {
            $comment->files = null;
        }
//        $comment->uploadFiles = UploadedFile::getInstances($comment, 'uploadFiles');
//        $fileSaver = \Yii::createObject(['class' => FileSaverComponent::class]);
        $comment->user_id = \Yii::$app->user->getId();

        if ($comment->validate()) {
//            foreach ($comment->uploadFiles as &$file) {
//                $file = $fileSaver->saveFile($file);
//                if (!$file) {
//                    return false;
//                }
//            }
//            $task->files = implode('/',$task->filesReal);

            // валидация + сохранение активности
            if ($comment->save()) {
                return $comment;
            }
            \Yii::error($comment->getErrors());
            return false;
        }
        //валидация файлов не прошла
        return false;
    }

    public function updateViews($comments):bool {
        foreach ($comments as $comment) {
            if ($comment->user_id != \Yii::$app->user->getId() && $comment->viewed != 1) {
                $comment->viewed = 1;
                $comment->save(false);
            }
        }
        return true;
    }

}