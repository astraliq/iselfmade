<?php


namespace app\components;


use app\base\BaseComponent;
use app\models\Tasks;
use app\models\User;
use phpDocumentor\Reflection\Types\False_;
use yii\db\ActiveRecord;
use yii\db\conditions\BetweenCondition;
use yii\helpers\Console;
use yii\web\UploadedFile;
use yii\widgets\ActiveForm;

class TasksComponent extends BaseComponent {
    public $modelClass;

    public function init() {
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function getModel() {
        return new $this->modelClass;
    }

    public function getUserTask($id) {
        $tasks = Tasks::find()
            ->where([
                'user_id' => \Yii::$app->user->getId(),
                'id' => $id,
            ])
            ->one();
        return $tasks;
    }

    public function getUserTasks() {
        $tasks = Tasks::find()
            ->where([
                'user_id' => \Yii::$app->user->getId(),
                'type_id' => 1,
                'deleted' => 0,
                'finished' => 0,
            ])
            ->orderBy(['date_create' => SORT_DESC])
            ->all();
        return $tasks;
    }

    // возвращает задачи на сегодня, с планируемым завершением до конца дня
    public function getTodayUserTasks() {
        $tasks = Tasks::find()
            ->where([
                'user_id' => \Yii::$app->user->getId(),
                'type_id' => 1,
                'deleted' => 0,
//                'finished' => 0,
            ])
            ->andWhere(['AND',
                ['>=', 'date_calculate', (new \DateTime(date(date('d.m.Y'))))->format('Y-m-d H:i:s')],
                ['<=', 'date_calculate', (new \DateTime(date('d.m.Y') . ' 23:59:59'))->format('Y-m-d H:i:s')]
            ])
            ->andWhere(['AND',
//                ['>=', 'date_start', (new \DateTime(date('d.m.Y')  . ' 00:00:00'))->format('Y-m-d H:i:s')],
                ['<=', 'date_start', (new \DateTime(date('d.M.Y') . ' 23:59:59'))->format('Y-m-d H:i:s')]
            ])
            ->orderBy(['date_create' => SORT_ASC])
            ->all();
        return $tasks;
    }
    // возвращает задачи на завтра
    public function getTomorrowUserTasks() {
        $nextDay = strtotime("+1 day");
        $tasks = Tasks::find()
            ->where([
                'user_id' => \Yii::$app->user->getId(),
                'type_id' => 1,
                'deleted' => 0,
//                'finished' => 0,
            ])
            ->andWhere(['AND',
                ['>=', 'date_calculate', (new \DateTime(date(date('d.m.Y', $nextDay))))->format('Y-m-d H:i:s')],
                ['<=', 'date_calculate', (new \DateTime(date('d.m.Y', $nextDay) . ' 23:59:59'))->format('Y-m-d H:i:s')]
            ])
            ->andWhere(['AND',
//                ['>=', 'date_start', (new \DateTime(date('d.m.Y', $nextDay)  . ' 00:00:00'))->format('Y-m-d H:i:s')],
                ['<=', 'date_start', (new \DateTime(date('d.M.Y', $nextDay) . ' 23:59:59'))->format('Y-m-d H:i:s')]
            ])
            ->orderBy(['date_create' => SORT_ASC])
            ->all();
        return $tasks;
    }

    // возвращает задачи на месяц на текущий момент
    public function getTodayUserAims() {
        $tasks = Tasks::find()
            ->where([
                'user_id' => \Yii::$app->user->getId(),
                'type_id' => 2,
                'deleted' => 0,
//                'finished' => 0,
            ])
            ->andWhere(['AND',
                ['>=', 'date_calculate', (new \DateTime(date('01.'.date('m.Y'))))->format('Y-m-d H:i:s')],
                ['<=', 'date_calculate', (new \DateTime(date('t', time()).date('.m.Y') . ' 23:59:59'))->format('Y-m-d H:i:s')]
            ])
            ->andWhere(['AND',
//                ['>=', 'date_start', (new \DateTime(date('01.'.date('m.Y'))))->format('Y-m-d H:i:s')],
                ['<=', 'date_start', (new \DateTime(date('t', time()).date('.m.Y') . ' 23:59:59'))->format('Y-m-d H:i:s')]
            ])
            ->orderBy(['date_create' => SORT_ASC])
            ->all();
        return $tasks;
    }

    // возвращает задачи на год на текущий момент
    public function getTodayUserGoals() {
        $tasks = Tasks::find()
            ->where([
                'user_id' => \Yii::$app->user->getId(),
                'type_id' => 3,
                'deleted' => 0,
//                'finished' => 0,
            ])
            ->andWhere(['AND',
                ['>=', 'date_calculate', (new \DateTime(date('01.01.'.date('Y'))))->format('Y-m-d H:i:s')],
                ['<=', 'date_calculate', (new \DateTime(date('31.12.'.date('Y')) . ' 23:59:59'))->format('Y-m-d H:i:s')]
            ])
            ->andWhere(['AND',
//                ['>=', 'date_start', (new \DateTime(date('01.01.'.date('Y'))))->format('Y-m-d H:i:s')],
                ['<=', 'date_start', (new \DateTime(date('31.12.'.date('Y')) . ' 23:59:59'))->format('Y-m-d H:i:s')]
            ])
            ->orderBy(['date_create' => SORT_ASC])
            ->all();
        return $tasks;
    }

    public function getAllTasksArr() {
        $tasks = Tasks::find()
            ->where(
                [
                    'user_id' => \Yii::$app->user->getId(),
                    'type_id' => 1,
                    'deleted' => 0,
                    'finished' => 0,
                ]
            )
            ->orderBy(['date_start' => SORT_DESC])
            ->all();
        $arr = [];
        foreach ($tasks as $task) {
            $arr += [$task->id => $task->task];
        }
        return $arr;
    }

    public function getAllAimsArr() {
        $tasks = Tasks::find()
            ->where(
                [
                    'user_id' => \Yii::$app->user->getId(),
                    'type_id' => 2,
                    'deleted' => 0,
                    'finished' => 0,
                ]
            )
            ->orderBy(['date_start' => SORT_DESC])
            ->all();
        $arr = [];
        foreach ($tasks as $task) {
            $arr += [$task->id => $task->task];
        }
        return $arr;
    }

    public function getAllGoalsArr() {
        $tasks = Tasks::find()
            ->where([
                'user_id' => \Yii::$app->user->getId(),
                'type_id' => 3,
                'deleted' => 0,
                'finished' => 0,
            ])
//            ->andWhere(['AND',
//                    ['<=', 'date_calculate', (new \DateTime(date('01.'.date('m.Y'))))->format('Y-m-d')],
//                    ['>=', 'date_calculate', (new \DateTime(date('t', time()).'.'.date('m.Y')))->format('Y-m-d H:i:s')]
//                ])
            ->orderBy(['date_start' => SORT_DESC])
            ->all();
        $arr = [];
        foreach ($tasks as $task) {
            $arr += [$task->id => $task->task];
        }
        return $arr;
    }

    public function getAllUserTasks() {
        return \Yii::$app->dao->getAllUserTasks(\Yii::$app->user->getId());
    }

    public function getChildTasks($taskId, $typeId=null) {
        $targetProp = '';
        if (!$typeId) {
            $task = Tasks::findOne(['id' => $taskId, 'user_id' => \Yii::$app->user->getId()]);
            $typeId = $task->type_id;
        }

        if ($typeId == 3) {
            $targetProp = 'goal_id';
        } elseif ($typeId == 2) {
            $targetProp = 'aim_id';
        }

        $childesFromBD = $this->getChilds($targetProp, $taskId);
        $childTasks = [];

        foreach ($childesFromBD as $child) {
            if ($child->aim_id == null) {
                $childTasks += [$child->id => []];
            } else {
                if (!array_key_exists($child->aim_id, $childTasks)) {
                    $childTasks += [$child->aim_id => [$child->id => []]];

                } else {
                    $childTasks[$child->aim_id] += [$child->id => []];
                }
            }
        }
        return $childTasks;
    }

    private function getChilds($targetProp, $taskId) {
        $childes = Tasks::find()
            ->where([
                'user_id' => \Yii::$app->user->getId(),
                $targetProp => $taskId,
                'deleted' => 0,
                'finished' => 0,
            ])
            ->orderBy(['date_start' => SORT_DESC])
            ->all();
        return $childes;
    }

    public function getDeletedTasks() {
        $tasks = Tasks::find()
            ->where([
                'user_id' => \Yii::$app->user->getId(),
                'deleted' => 1,
//                'finished' => 0,
            ])
            ->orderBy(['date_start' => SORT_DESC])
            ->all();
        return $tasks;
    }

    public function addTask(Tasks $task)
    {
//        $task->filesReal = UploadedFile::getInstances($task, 'filesReal');
//        $fileSaver = \Yii::createObject(['class' => FileSaverComponent::class]);
        if (!$task->user_id) {
            $task->user_id = \Yii::$app->user->getId();
        }
   
        if ($task->validate()) {
//            foreach ($task->filesReal as &$file) {
//                $file = $fileSaver->saveFile($file);
//                if (!$file) {
//                    return false;
//                }
//            }
//            $task->files = implode('|',$task->filesReal);

            // валидация + сохранение активности
            if ($task->save()) {
                return $task;
            }
            \Yii::error($task->getErrors());
            return false;
        }
        //валидация файлов не прошла
        return false;
    }

    public function deleteTask(Tasks $task) {
        if ($task->validate()) {
            $task->deleted = 1;
            if ($task->save(false)) {
                return true;
            }
            return false;
        }

        return false;
    }

    public function finishTask(Tasks $task) {
        if ($task->validate()) {
            if ($task->finished == 1) {
                $task->finished = 0;
                $task->date_finish = null;
            } else {
                $task->finished = 1;
                $task->date_finish = date('Y-m-d H:i:s');
            }

            if ($task->save(false)) {
                return true;
            }
            return false;
        }

        return false;
    }

    public function restoreTask(Tasks $task) {
        if ($task->validate()) {
            $task->deleted = 0;
            if ($task->save(false)) {
                return true;
            }
            return false;
        }
        return false;
    }

    public function hardDeleteTask(Tasks $task) {
        if ($task->delete()) {
            return true;
        }
//        \Yii::error($task->getErrors());
        return false;
    }

    public function updateAllTasks($tasks) {
        $this->modelClass = Tasks::class;
        foreach ($tasks as $task) {
            if (\Yii::$app instanceof yii\console\Application) {
                $user_id = $task->user_id;
            } else {
                $user_id = \Yii::$app->user->getId();
            }

            $model = $this->getModel();
            $taskToUpdate = $model->findOne(['id' => $task['id'], 'user_id' => $user_id]);
            $taskToUpdate->load(['Tasks' => $task]);
            $this->addTask($taskToUpdate);
        }
        return true;
    }

    public function findTodayNotifTask() {
        return Tasks::find()
            ->andWhere('useNotification = 1')
            ->andWhere('deleted = 0')
            ->andWhere('dateStart>=:date',[':date'=>date('Y-m-d')])
            ->andWhere('dateStart<=:date2',[':date2'=>date('Y-m-d'. ' 23:59:59')])->all();
    }

    private function getDataToRenewTasks($type_id) {
        $prev = '';
        switch ($type_id) {
            case 1:
                $prev = strtotime("-1 day");
                $dateFrom = (new \DateTime(date('d.m.Y', $prev)  . ' 00:00:00'))->format('Y-m-d H:i:s');
                $dateTo = (new \DateTime(date('d.m.Y', $prev) . ' 23:59:59'))->format('Y-m-d H:i:s');
                break;
            case 2:
                $prev = strtotime(date('15.m.Y') . "-1 month");
                $dateFrom = (new \DateTime(date('01.m.Y', $prev)  . ' 00:00:00'))->format('Y-m-d H:i:s');
                $dateTo = (new \DateTime(date('t', $prev).date('.m.Y', $prev) . ' 23:59:59'))->format('Y-m-d H:i:s');
                break;
            case 3:
                $prev = strtotime("-1 year");
                $dateFrom = (new \DateTime(date('01.01.'.date('Y',$prev))))->format('Y-m-d H:i:s');
                $dateTo = (new \DateTime(date('31.12.'.date('Y',$prev)) . ' 23:59:59'))->format('Y-m-d H:i:s');
                break;
        }
        $newDate = (new \DateTime(date('d.m.Y') . ' 23:59:59'))->format('Y-m-d H:i:s');

        return [
            'newDate' => $newDate,
            'dateFrom' => $dateFrom,
            'dateTo' => $dateTo,
        ];
    }

    public function checkDataToRenew($type_id):bool {
        $renewData = $this->getDataToRenewTasks($type_id);
        $check = Tasks::find()
            ->where([
                'user_id' => \Yii::$app->user->getId(),
                'type_id' => $type_id,
                'deleted' => 0,
                'finished' => 0,
            ])->andWhere(['AND',
                ['>=', 'date_calculate', $renewData['dateFrom']],
                ['<=', 'date_calculate', $renewData['dateTo']],
            ])
            ->orderBy(['date_create' => SORT_DESC])
            ->all();

        if ($check) {
            return true;
        } else {
            return false;
        }
    }

    public function renewLastUnfinishedTasks($type_id):bool {
        $renewData = $this->getDataToRenewTasks($type_id);
        $update = Tasks::updateAll(
            ['date_calculate' => $renewData['newDate']],
                ['and',
                    ['user_id' => \Yii::$app->user->getId()],
                    ['type_id' => $type_id],
                    ['deleted' => 0],
                    ['finished' => 0],
                    ['>=', 'date_calculate', $renewData['dateFrom']],
                    ['<=', 'date_calculate', $renewData['dateTo']],
//                    ['>=', 'date_start', (new \DateTime(date('d.m.Y', $prev)  . ' 00:00:00'))->format('Y-m-d H:i:s')],
//                    ['<=', 'date_start', (new \DateTime(date('d.M.Y', $prev) . ' 23:59:59'))->format('Y-m-d H:i:s')],
                ]
        );
        if ($update) {
            return true;
        }
        return false;
    }

    public function getWidgetData($type_id, $nextPeriod) {
        if ($nextPeriod == 0) {
            switch ($type_id) {
                case 3:
                    $title = 'Цели на год';
                    $tasks = $this->getTodayUserGoals();
                    break;
                case 2:
                    $month = \Yii::$app->params['monthsImenit'][\Yii::$app->formatter->asDate(date('Y-m-d'), 'M')];
                    $title = 'Задачи на '. $month;
                    $tasks = $this->getTodayUserAims();
                    break;
                case 1:
                    $title = 'Что я сделал сегодня';
                    $tasks = $this->getTodayUserTasks();
                    break;
            }
        } else {
            $title = 'Что я сделаю завтра';
            $tasks = $this->getTomorrowUserTasks();
        }

        return [
            'title' => $title,
            'tasks' => $tasks,
            'nextPeriod' => $nextPeriod,
        ];
    }

    private function existRepeatTaskInArr($task, $searchArr) {
        $keysArr = [];
        foreach ($searchArr as $key => $searchTask) {
            if ($searchTask['repeated_by_id'] == $task['id']) {
                array_push($keysArr, $key);
            }
        }
        return $keysArr;
    }

    public function createRepeatedTasks():bool {
        $this->modelClass = Tasks::class;
        $today = date('d.m.Y');
        $tomorrow = date('d.m.Y', strtotime("+1 day"));
        $tasksToRepeat = Tasks::find()
//            ->where([
//                'user_id' => \Yii::$app->user->getId(),
//                'type_id' => 1,
//                'deleted' => 0,
//            ])
            ->andWhere(['not', ['repeat_type_id' => null]])
            ->orderBy(['date_create' => SORT_ASC])
            ->all();
        $alreadyRepeatedTasks = Tasks::find()
            ->where([
                'repeat_type_id' => null,
            ])
            ->andWhere(['not', ['repeated_by_id' => null]])
            ->orderBy(['date_create' => SORT_ASC])
            ->all();

        $tasksToCreateToday = [];
        $tasksToCreateNextPeriod = [];
        foreach ($tasksToRepeat as $task) {
            $dateStartTask = \Yii::$app->formatter->asDateTime(
                $task->date_start, 'php:d.m.Y'
            );
            $dateCalcTask = \Yii::$app->formatter->asDateTime(
                $task->date_calculate, 'php:d.m.Y'
            );

            // ищем ранее созданные повторные такие же задачи
            $findRepeatedTasksKeys = $this->existRepeatTaskInArr($task, $alreadyRepeatedTasks);
            switch ($task->repeat_type_id) {
                case 1:
                    if ($findRepeatedTasksKeys) {
                        $todayAdd = true;
                        $tomorrowAdd = true;
                        foreach ($findRepeatedTasksKeys as $key) {
                            // проверяем даты старта и расчетные завершения задач и если для текущего периода не создавались задачи, то добавляем задачу в массив $tasksToCreate для последующего создания задачи
                            $dateStartRepeated = \Yii::$app->formatter->asDateTime(
                                $alreadyRepeatedTasks[$key]->date_start, 'php:d.m.Y'
                            );
                            $dateCalcRepeated = \Yii::$app->formatter->asDateTime(
                                $alreadyRepeatedTasks[$key]->date_calculate, 'php:d.m.Y'
                            );
                            if ($dateStartRepeated == $today || $dateCalcRepeated == $today || $dateStartTask == $today || $dateCalcTask == $today) {
                                $todayAdd = false;
                            }
                            if ($dateStartRepeated == $tomorrow || $dateCalcRepeated == $tomorrow || $dateStartTask == $tomorrow || $dateCalcTask == $tomorrow) {
                                $tomorrowAdd = false;
                            }
                        }

                        if ($todayAdd) {
                            array_push($tasksToCreateToday, $task);
                        }
                        if ($tomorrowAdd) {
                            array_push($tasksToCreateNextPeriod, $task);
                        }
                    } else {
                        if ($dateStartTask != $today && $dateCalcTask != $today) {
                            array_push($tasksToCreateToday, $task);
                        }
                        if ($dateStartTask != $tomorrow && $dateCalcTask != $tomorrow) {
                            array_push($tasksToCreateNextPeriod, $task);
                        }
                    }
                    break;
                case 2:
                    $the_date = time();
//                    $the_date = strtotime('23.10.2020');
                    $day = date('d');
                    $month = date('m', strtotime(date('15.m.Y') . "+1 month"));
                    $year = date('Y', strtotime("+1 month"));
                    // для проверки
//                    $day = '23';
//                    $month = '11';
//                    $year = '2020';

                    if (!checkdate(intval($month), intval($day), intval($year))) {
                        $nextRepeatDate = date('d.m.Y', strtotime('last day of next month', $the_date));
                    } else {
                        $nextRepeatDate = date('d.m.Y', strtotime("+1 month", $the_date));
                    }

                    if ($tomorrow == $nextRepeatDate && $this->checkRepeatedTasksAddedTomorrow($findRepeatedTasksKeys, $alreadyRepeatedTasks)) {
                       array_push($tasksToCreateNextPeriod, $task);
                    }
                    break;
                case 3:
                    $the_date = time();
                    $day = date('d');
                    $month = date('m', strtotime( "+1 year"));
                    $year = date('Y', strtotime("+1 year"));

                    if (!checkdate(intval($month), intval($day), intval($year))) {
                        $nextRepeatDate = date('28.02.Y', strtotime( "+1 year"));
                    } else {
                        $nextRepeatDate = date('d.m.Y', strtotime("+1 month", $the_date));
                    }

                    if ($tomorrow == $nextRepeatDate && $this->checkRepeatedTasksAddedTomorrow($findRepeatedTasksKeys, $alreadyRepeatedTasks)) {
                        array_push($tasksToCreateNextPeriod, $task);
                    }
                    break;
                case 4:
                    $the_date = time();
//                    $the_date = strtotime('31.03.2020');
                    $day = date('d');
                    $month = date('m', strtotime(date('15.m.Y') . "+3 month"));
                    $year = date('Y', strtotime("+3 month"));
                    // для проверки
//                    $day = '31';
//                    $month = '06';
//                    $year = '2021';

                    if (!checkdate(intval($month), intval($day), intval($year))) {
                        $nextRepeatDate = date('d.m.Y', strtotime("last day of next month", strtotime('+2 month', $the_date)));
                    } else {
                        $nextRepeatDate = date('d.m.Y', strtotime("+3 month", $the_date));
                    }

                    if ($tomorrow == $nextRepeatDate && $this->checkRepeatedTasksAddedTomorrow($findRepeatedTasksKeys, $alreadyRepeatedTasks)) {
                        array_push($tasksToCreateNextPeriod, $task);
                    }
                    break;
                case 5:
                    $nextRepeatDate = date('d.m.Y', strtotime("+1 week"));
                    if ($tomorrow == $nextRepeatDate && $this->checkRepeatedTasksAddedTomorrow($findRepeatedTasksKeys, $alreadyRepeatedTasks)) {
                        array_push($tasksToCreateNextPeriod, $task);
                    }
                    break;
                case 6:
                    $nextRepeatDate = date('d.m.Y', $this->getNextWorkday());
                    if ($tomorrow == $nextRepeatDate && $this->checkRepeatedTasksAddedTomorrow($findRepeatedTasksKeys, $alreadyRepeatedTasks)) {
                        array_push($tasksToCreateNextPeriod, $task);
                    }
                    break;
                case 7:
                    $nextRepeatDate = date('d.m.Y', $this->getNextHoliday());
                    if ($tomorrow == $nextRepeatDate && $this->checkRepeatedTasksAddedTomorrow($findRepeatedTasksKeys, $alreadyRepeatedTasks)) {
                        array_push($tasksToCreateNextPeriod, $task);
                    }
                    break;
                case 8:
                    $todayAdd = false;
                    $tomorrowAdd = false;
                    // получаем массив повторов по дням недели из базы
                    $selectedRepeats = explode(',', $task->repeated_weekdays);
                    for ($i = 0; $i < count($selectedRepeats); $i++) {
                        $selectedRepeats[$i] = $selectedRepeats[$i] == 7 ? 0 : $selectedRepeats[$i];
                    }
                    $dayNum = (int) date('w');
                    $dayNumTomorrow = (int) date('w', strtotime("+1 day"));

                    if (in_array($dayNum, $selectedRepeats)) {
                        $todayAdd = true;
                    }

                    if (in_array($dayNumTomorrow, $selectedRepeats)) {
                        $tomorrowAdd = true;
                    }

                    if ($todayAdd && $this->checkRepeatedTasksAddedToday($findRepeatedTasksKeys, $alreadyRepeatedTasks)) {
                        array_push($tasksToCreateToday, $task);
                    }

                    if ($tomorrowAdd && $this->checkRepeatedTasksAddedTomorrow($findRepeatedTasksKeys, $alreadyRepeatedTasks)) {
                        array_push($tasksToCreateNextPeriod, $task);
                    }
                    break;
            }
        }

        // создание повторных задач
        foreach ($tasksToCreateToday as $task) {
            $model = $this->getModel();
            $model->user_id = $task->user_id;
            $model->private_id = $task->private_id;
            $model->type_id = $task->type_id;
            $model->cat_id = $task->cat_id;
            $model->aim_id = $task->aim_id;
            $model->goal_id = $task->goal_id;
            $model->task = $task->task;
            $model->main_img = $task->main_img;
            $model->buddy_ids = $task->buddy_ids;
            $model->group_id = $task->group_id;
            $model->curators_ids = $task->curators_ids;
            $model->curators_emails = $task->curators_emails;
            $model->hashtags = $task->hashtags;
            $model->deleted = $task->deleted;
            $model->repeat_type_id = null;
            $model->secret_key = $task->secret_key;
            $model->nextPeriod = 0;
            // id основной задачи пишем в repeated_by_id
            $model->repeated_by_id = $task->id;

            $this->addTask($model);
        }
        foreach ($tasksToCreateNextPeriod as $task) {
            $model = $this->getModel();
            $model->user_id = $task->user_id;
            $model->private_id = $task->private_id;
            $model->type_id = $task->type_id;
            $model->cat_id = $task->cat_id;
            $model->aim_id = $task->aim_id;
            $model->goal_id = $task->goal_id;
            $model->task = $task->task;
            $model->main_img = $task->main_img;
            $model->buddy_ids = $task->buddy_ids;
            $model->group_id = $task->group_id;
            $model->curators_ids = $task->curators_ids;
            $model->curators_emails = $task->curators_emails;
            $model->hashtags = $task->hashtags;
            $model->deleted = $task->deleted;
            $model->repeat_type_id = null;
            $model->secret_key = $task->secret_key;
            $model->nextPeriod = 1;
            // id основной задачи пишем в repeated_by_id
            $model->repeated_by_id = $task->id;

            $this->addTask($model);
        }
        return true;
    }

    private function getNextWorkday($date=null) {
        // список праздников (нерабочих дней)
        $bankHols = array(
            '01.01.2021',
            '04.01.2021',
            '05.01.2021',
            '06.01.2021',
            '07.01.2021',
            '08.01.2021',
            '22.02.2021',
            '23.02.2021',
            '08.03.2021',
            '03.05.2021',
            '10.05.2021',
            '14.06.2021',
            '04.11.2021',
            '31.12.2021',
        );
        $nextdays = array(strtotime('+1 day'), strtotime('+2 days'), strtotime('+3 days'), strtotime('+4 days'), strtotime('+5 days'), strtotime('+6 days'), strtotime('+7 days'));
        for ($i = 0; $i < count($nextdays); $i++) {
            $dayNum = (int) date('w', $nextdays[$i]);
            $daytext = date('d.m.Y', $nextdays[$i]);
            if (($dayNum > 0) && ($dayNum < 6) && (!in_array($daytext, $bankHols))) {
              return $nextdays[$i];
            }
        }
        return false;
    }

    private function getNextHoliday($date=null) {
        // список праздников (нерабочих дней)
        $bankHols = array(
            '01.01.2021',
            '04.01.2021',
            '05.01.2021',
            '06.01.2021',
            '07.01.2021',
            '08.01.2021',
            '22.02.2021',
            '23.02.2021',
            '08.03.2021',
            '03.05.2021',
            '10.05.2021',
            '14.06.2021',
            '04.11.2021',
            '31.12.2021',
        );
        $nextdays = array(strtotime('+1 day'), strtotime('+2 days'), strtotime('+3 days'), strtotime('+4 days'), strtotime('+5 days'), strtotime('+6 days'), strtotime('+7 days'));
        for ($i = 0; $i < count($nextdays); $i++) {
            $dayNum = (int) date('w', $nextdays[$i]);
            $daytext = date('d.m.Y', $nextdays[$i]);
            if (($dayNum == 0) || ($dayNum == 6) || (in_array($daytext, $bankHols))) {
              return $nextdays[$i];
            }
        }
        return false;
    }

    private function checkRepeatedTasksAddedToday($findRepeatedTasksKeys, $alreadyRepeatedTasks) {
        $today = date('d.m.Y');
        if ($findRepeatedTasksKeys) {
            $todayAdd = true;
            foreach ($findRepeatedTasksKeys as $key) {
                $dateStartRepeated = \Yii::$app->formatter->asDateTime(
                    $alreadyRepeatedTasks[$key]->date_start, 'php:d.m.Y'
                );
                $dateCalcRepeated = \Yii::$app->formatter->asDateTime(
                    $alreadyRepeatedTasks[$key]->date_calculate, 'php:d.m.Y'
                );
                if ($dateStartRepeated == $today) {
                    $todayAdd = false;
                }
            }
        }
        return $todayAdd;
    }

    private function checkRepeatedTasksAddedTomorrow($findRepeatedTasksKeys, $alreadyRepeatedTasks) {
        $tomorrow = date('d.m.Y', strtotime("+1 day"));
        if ($findRepeatedTasksKeys) {
            $tomorrowAdd = true;
            foreach ($findRepeatedTasksKeys as $key) {
                $dateStartRepeated = \Yii::$app->formatter->asDateTime(
                    $alreadyRepeatedTasks[$key]->date_start, 'php:d.m.Y'
                );
                $dateCalcRepeated = \Yii::$app->formatter->asDateTime(
                    $alreadyRepeatedTasks[$key]->date_calculate, 'php:d.m.Y'
                );
                if ($dateStartRepeated == $tomorrow) {
                    $tomorrowAdd = false;
                }
            }
        }
        return $tomorrowAdd;
    }

    public function getAllRepeatedTasks() {
        $tasks = Tasks::find()
            ->where([
                'user_id' => \Yii::$app->user->getId(),
//                'type_id' => 1,
//                'deleted' => 0,
            ])
            ->andWhere(['not', ['repeat_type_id' => null]])
            ->orderBy(['date_create' => SORT_ASC])
            ->all();

        return $tasks;
    }



}