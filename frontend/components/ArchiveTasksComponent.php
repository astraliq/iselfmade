<?php


namespace frontend\components;


use common\base\BaseComponent;
use frontend\models\ArchiveTasks;
use frontend\models\Tasks;
use yii\db\Connection;
use yii\db\Query;

class ArchiveTasksComponent extends BaseComponent {
    public $modelClass;

    private function GetConnection():Connection {
        return \Yii::$app->db;
    }

    public function init() {
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function getModel() {
        return new $this->modelClass;
    }

    public function archiveLastYearTasks(ArchiveTasks $model) {
        $nowDate = date('Y-m-d H:i:s');
//        if (date('m') != 1 && date('d') != 2) {
//            return false;
//        }

        $dayX = (new \DateTime('01.01.' . date('Y')  . ' 00:00:00'))->format('Y-m-d H:i:s');
        $query=new Query();
        $trans = $this->getConnection()->beginTransaction();

        try{
            $insert = $this->getConnection()
                ->createCommand('INSERT INTO '. $model->tableName() . ' SELECT * FROM ' . Tasks::tableName() . ' WHERE (`finished`=1) AND (`date_start` < :dtStart) AND (`date_finish` < :dtFinish) ORDER BY `date_start` DESC', [
                    ':dtStart' => $dayX,
                    ':dtFinish' => $dayX,
                ])->execute();
            if ($insert) {
                $this->getConnection()
                    ->createCommand('DELETE FROM '. Tasks::tableName() . ' WHERE (`finished`=1) AND (`date_start` < :dtStart) AND (`date_finish` < :dtFinish) ORDER BY `date_start` DESC', [
                        ':dtStart' => $dayX,
                        ':dtFinish' => $dayX,
                    ])->execute();
            }
//                        throw new Exception('err');
            $trans->commit();
        } catch (\Exception $e){
            $trans->rollBack();
            return false;
        }

        return true;
    }


}