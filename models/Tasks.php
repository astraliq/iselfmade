<?php

namespace app\models;

use app\Components\EncryptComponent;
use Yii;

class Tasks extends TasksBase {

    public $filesReal;
    public $date_create_view;
    public $date_calculate_view;
    public $nextPeriod;
    const TASK = 1;
    const AIM = 2;
    const GOAL = 3;
    const TYPE_TASK = [self::TASK => 'Дело', self::AIM => 'Задача', self::GOAL => 'Цель', ];
    const NO_PRIVATE = 1;
    const ONLY_BUDDY = 2;
    const ONLY_CURATOR = 3;
    const PRIVATE = 4;
    const TASK_PRIVATE = [self::NO_PRIVATE => 'Видна всем', self::ONLY_BUDDY => 'Видна только бадди', self::ONLY_CURATOR => 'Видна только куратору', self::PRIVATE => 'Видна только мне',];


    public function afterFind() {
        parent::afterFind();
        $this->date_create_view = \Yii::$app->formatter->asDateTime($this->date_create, 'php:d F Y, H:i:s');
        $this->date_calculate_view = \Yii::$app->formatter->asDateTime($this->date_calculate, 'php:d F Y, H:i:s');
//        echo $this->date_calculate;
//        echo '<br>';
//        exit();
//        $dateCalc = \DateTime::createFromFormat('Y-m-d', $this->date_calculate);
//        echo $dateCalc;
//        exit();
//        $this->date_calculate = $dateCalc->format('d.m.Y');

//        echo $this->date_calculate;
//        exit();
        $user = new User();

        if ($this->private_id == self::PRIVATE) {
            $this->task = \Yii::$app->encrypt->expandData($this->task, $user->getUserEmail(\Yii::$app->user->getId()), $this->user_id, $this->secret_key, $this->id);
        }
    }


    public function beforeValidate() {
        if (!empty($this->date_calculate)){
            $date = \DateTime::createFromFormat('d.m.Y', $this->date_calculate);
            if ($date) {
                $this->date_calculate = $date->format('Y-m-d');
            }
        }
        if (empty($this->type_id)){
            $this->type_id = 1;
        }
        if (empty($this->hashtags)){
            $this->hashtags = null;
        }

        switch ($this->type_id) {
            case 1:
                if ($this->nextPeriod == 1) {
                    $addPeriod = strtotime("+1 day");
                    $this->date_start = date('Y-m-d', $addPeriod) . ' 00:00:00';
                    $this->date_calculate = date('Y-m-d', $addPeriod) . ' 23:59:59';

                } else {
                    $this->date_calculate = date('Y-m-d') . ' 23:59:59';
                }
                break;
            case 2:
                if ($this->nextPeriod == 1) {
                    $addPeriod = strtotime("+1 month");
                    $this->date_start = date('Y-m-d', $addPeriod) . ' 00:00:00';
                    $this->date_calculate = (new \DateTime(date('t', time()).'.'.date('m.Y', $addPeriod) . ' 23:59:59'))->format('Y-m-d H:i:s');
                } else {
                    $this->date_calculate = (new \DateTime(date('t', time()).'.'.date('m.Y') . ' 23:59:59'))->format('Y-m-d H:i:s');

                }
                break;
            case 3:
                if ($this->nextPeriod == 1) {
                    $addPeriod = strtotime("+1 year");
                    $this->date_start = date('Y-m-d', $addPeriod) . ' 00:00:00';
                    $this->date_calculate = (new \DateTime(date('31.12.'.date('Y', $addPeriod)) . ' 23:59:59'))->format('Y-m-d H:i:s');
                } else {
                    $this->date_calculate = (new \DateTime(date('31.12.'.date('Y')) . ' 23:59:59'))->format('Y-m-d H:i:s');
                }
                break;
        }

//            echo '<pre>';
//            echo $this->date_calculate;
//            echo '</pre>';
//            exit();

        if (!$this->id) {
            $max = $this->find()
                ->andWhere(['user_id' => \Yii::$app->user->getId()])
                ->max('id');
            if (!$max) {
                $this->id = 1;
            } else {
                $this->id = ++$max;
            }
        }

        // заглушка, пока не используется повтор
        $this->repeat_type_id = null;

        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function afterValidate() {

        if ($this->type_id == 2) {
            $this->aim_id = null;
        }

        if ($this->type_id == 3) {
            $this->aim_id = null;
            $this->goal_id= null;
        }

        parent::afterValidate(); // TODO: Change the autogenerated stub
    }


    public function beforeSave($insert) {
        if ($this->private_id == self::PRIVATE) {
            $user = new User();
            $this->secret_key = \Yii::$app->encrypt->genFalseKey();
            $this->task = \Yii::$app->encrypt->encryptData($this->task, $user->getUserEmail(\Yii::$app->user->getId()), $this->user_id, $this->secret_key, $this->id);

        } else {
            $this->secret_key = null;
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

//    public static function primaryKey() {
//        return 'id';
//    }

    public function afterSave($insert, $changedAttributes) {
        $this->date_create_view = Yii::$app->formatter->asDateTime($this->date_create, 'php:d F Y H:i:s');
        $this->date_calculate_view = Yii::$app->formatter->asDateTime($this->date_calculate, 'php:d F Y H:i:s');
        return parent::afterSave($insert, $changedAttributes);
    }


    public function rules() {
        return array_merge([
            ['type_id', 'in', 'range' => array_keys(self::TYPE_TASK)],
            [['task'], 'trim'],
            [['task'],'required'],
            ['task','string','min' => 2,'max' => 250],
            [['private_id','repeat_type_id'],'integer'],
            ['private_id', 'in', 'range' => array_keys(self::TASK_PRIVATE)],
            ['date_calculate', 'date', 'format' => 'php: Y-m-d H:i:s'],
            [['nextPeriod', 'date_create_view', 'date_calculate_view'], 'safe'],
//            ['aim_id', 'value' => null, 'when' => function($model) {
//                return !$model->type_id == 1 || !$model->type_id == 2;
//            }],
//            ['goal_id', 'value' => null, 'when' => function($model) {
//                return !$model->type_id == 2;
//            }],
//            [['email','files'], 'default', 'value' => null],
//            ['file','file', 'extensions' => ['jpg', 'png', 'jpeg']],
        ],parent::rules()); // TODO: Change the autogenerated stub
    }

    public function attributeLabels() {
        $labels = parent::attributeLabels(); // TODO: Change the autogenerated stub
        $labels['type_id'] = \Yii::t('app', 'Тип задачи');
        $labels['task'] = \Yii::t('app', 'Сделать:');
        $labels['hashtags'] = \Yii::t('app', 'Список хештегов через пробел:');
        $labels['date_calculate'] = \Yii::t('app', 'Завершить:');
        return $labels;
    }


}
